# Generated by Django 2.2.6 on 2019-11-06 15:45
import re
import uuid
from pathlib import PurePath

import datahub.company.models.adviser
import django.contrib.postgres.fields
import django.contrib.postgres.operations
import django.core.validators
import django.utils.timezone
import mptt.fields
from django.conf import settings
from django.db import migrations, models

from datahub.core.migration_utils import load_yaml_data_in_migration


def load_one_list_tiers(apps, schema_editor):
    load_yaml_data_in_migration(
        apps,
        PurePath(__file__).parent / '0001_one_list_tiers.yaml',
    )


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('metadata', '0021_delete_companyclassification'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        django.contrib.postgres.operations.CITextExtension(
        ),
        migrations.CreateModel(
            name='OneListTier',
            fields=[
                ('disabled_on', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True)),
                ('order', models.FloatField(default=0.0)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ExportExperienceCategory',
            fields=[
                ('disabled_on', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True)),
            ],
            options={
                'ordering': ('name',),
                'abstract': False,
                'verbose_name_plural': 'export experience categories',
            },
        ),
        migrations.CreateModel(
            name='Advisor',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('email', django.contrib.postgres.fields.citext.CICharField(max_length=255, unique=True, verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Deselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('dit_team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.Team')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
                ('telephone_number', models.CharField(blank=True, max_length=255)),
                ('contact_email', models.EmailField(blank=True, max_length=255)),
            ],
            options={
                'verbose_name': 'adviser',
            },
            managers=[
                ('objects', datahub.company.models.adviser.AdviserManager()),
            ],
        ),
        migrations.AddIndex(
            model_name='advisor',
            index=models.Index(fields=['first_name', 'last_name'], name='company_adv_first_n_61a74f_idx'),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('archived_on', models.DateTimeField(blank=True, null=True)),
                ('archived_reason', models.TextField(blank=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('registered_address_1', models.CharField(blank=True, max_length=255)),
                ('registered_address_2', models.CharField(blank=True, max_length=255)),
                ('registered_address_town', models.CharField(blank=True, max_length=255)),
                ('registered_address_county', models.CharField(blank=True, max_length=255)),
                ('registered_address_postcode', models.CharField(blank=True, max_length=255)),
                ('company_number', models.CharField(blank=True, max_length=255, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('description', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, max_length=255, null=True)),
                ('archived_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('business_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.BusinessType')),
                ('employee_range', models.ForeignKey(blank=True, help_text='Not used when duns_number is set. In that case, use number_of_employees instead.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.EmployeeRange')),
                ('export_to_countries', models.ManyToManyField(blank=True, related_name='companies_exporting_to', to='metadata.Country')),
                ('future_interest_countries', models.ManyToManyField(blank=True, related_name='companies_with_future_interest', to='metadata.Country')),
                ('headquarter_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.HeadquarterType')),
                ('one_list_account_owner', models.ForeignKey(blank=True, help_text='Global account manager', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='one_list_owned_companies', to=settings.AUTH_USER_MODEL)),
                ('registered_address_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='companies_with_country_registered_address', to='metadata.Country')),
                ('sector', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.Sector')),
                ('turnover_range', models.ForeignKey(blank=True, help_text='Not used when duns_number is set. In that case, use turnover instead.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.TurnoverRange')),
                ('uk_region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.UKRegion')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('vat_number', models.CharField(blank=True, max_length=255)),
                ('export_experience_category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='company.ExportExperienceCategory')),
                ('reference_code', models.CharField(blank=True, max_length=255)),
                ('archived_documents_url_path', models.CharField(blank=True, help_text='Legacy field. File browser path to the archived documents for this company.', max_length=255)),
                ('global_headquarters', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='subsidiaries', to='company.Company')),
                ('transfer_reason', models.CharField(blank=True, choices=[('duplicate', 'Duplicate record')], help_text='The reason data for this company was transferred.', max_length=255)),
                ('transferred_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('transferred_on', models.DateTimeField(blank=True, null=True)),
                ('transferred_to', models.ForeignKey(blank=True, help_text='Where data about this company was transferred to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='transferred_from', to='company.Company')),
                ('duns_number', models.CharField(blank=True, help_text='Dun & Bradstreet unique identifier. Nine-digit number with leading zeros.', max_length=9, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(9), django.core.validators.MaxLengthValidator(9), django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z'), code='invalid', message='Enter a valid integer.')])),
                ('one_list_tier', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='company.OneListTier')),
                ('trading_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=255), blank=True, default=list, size=None)),
                ('is_turnover_estimated', models.BooleanField(blank=True, help_text='Only used when duns_number is set.', null=True)),
                ('turnover', models.BigIntegerField(blank=True, help_text='In USD. Only used when duns_number is set.', null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('is_number_of_employees_estimated', models.BooleanField(blank=True, help_text='Only used when duns_number is set.', null=True)),
                ('number_of_employees', models.PositiveIntegerField(blank=True, help_text='Only used when duns_number is set.', null=True)),
                ('address_1', models.CharField(blank=True, max_length=255)),
                ('address_2', models.CharField(blank=True, max_length=255)),
                ('address_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='companies_with_country_address', to='metadata.Country')),
                ('address_county', models.CharField(blank=True, max_length=255)),
                ('address_postcode', models.CharField(blank=True, max_length=255)),
                ('address_town', models.CharField(blank=True, max_length=255)),
                ('pending_dnb_investigation', models.BooleanField(default=False, help_text='Whether this company is to be investigated by DNB.')),
                ('dnb_investigation_data', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('export_potential', models.CharField(blank=True, choices=[('very_high', 'Very High'), ('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('very_low', 'Very Low')], help_text='Score that signifies export potential, imported from Data Science', max_length=255, null=True)),
                ('great_profile_status', models.CharField(blank=True, choices=[('published', 'Published'), ('unpublished', 'Unpublished'), (None, 'No profile or not known')], help_text='Whether this company has a profile and agreed to be published or not', max_length=255, null=True)),
                ('global_ultimate_duns_number', models.CharField(blank=True, db_index=True, help_text='Dun & Bradstreet unique identifier for global ultimate.', max_length=9, validators=[django.core.validators.MinLengthValidator(9), django.core.validators.MaxLengthValidator(9), django.core.validators.RegexValidator(re.compile('^-?\\d+\\Z'), code='invalid', message='Enter a valid integer.')])),
            ],
            options={
                'permissions': (('view_company_document', 'Can view company document'), ('view_company_timeline', 'Can view company timeline'), ('export_company', 'Can export company'), ('change_regional_account_manager', 'Can change regional account manager')),
                'verbose_name_plural': 'companies',
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('created_on', models.DateTimeField(auto_now_add=True, db_index=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('archived', models.BooleanField(default=False)),
                ('archived_on', models.DateTimeField(blank=True, null=True)),
                ('archived_reason', models.TextField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('job_title', models.CharField(blank=True, max_length=255, null=True)),
                ('primary', models.BooleanField()),
                ('telephone_countrycode', models.CharField(max_length=255)),
                ('telephone_number', models.CharField(max_length=255)),
                ('email', models.EmailField(max_length=254)),
                ('address_same_as_company', models.BooleanField(default=False)),
                ('address_1', models.CharField(blank=True, max_length=255, null=True)),
                ('address_2', models.CharField(blank=True, max_length=255, null=True)),
                ('address_town', models.CharField(blank=True, max_length=255, null=True)),
                ('address_county', models.CharField(blank=True, max_length=255, null=True)),
                ('address_postcode', models.CharField(blank=True, max_length=255, null=True)),
                ('telephone_alternative', models.CharField(blank=True, max_length=255, null=True)),
                ('email_alternative', models.EmailField(blank=True, max_length=254, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('address_country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.Country')),
                ('adviser', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='contacts', to=settings.AUTH_USER_MODEL)),
                ('archived_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contacts', to='company.Company')),
                ('title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='metadata.Title')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('accepts_dit_email_marketing', models.BooleanField(default=False)),
                ('archived_documents_url_path', models.CharField(blank=True, help_text='Legacy field. File browser path to the archived documents for this contact.', max_length=255)),
            ],
            options={
                'permissions': (('view_contact_document', 'Can view contact document'), ('export_contact', 'Can export contact')),
            },
        ),
        migrations.CreateModel(
            name='OneListCoreTeamMember',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('adviser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='one_list_core_team_memberships', to=settings.AUTH_USER_MODEL)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='one_list_core_team_members', to='company.Company')),
            ],
            options={
                'unique_together': {('company', 'adviser')},
            },
        ),
        migrations.CreateModel(
            name='CompaniesHouseCompany',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('registered_address_1', models.CharField(max_length=255)),
                ('registered_address_2', models.CharField(blank=True, max_length=255)),
                ('registered_address_town', models.CharField(max_length=255)),
                ('registered_address_county', models.CharField(blank=True, max_length=255)),
                ('registered_address_postcode', models.CharField(blank=True, max_length=255)),
                ('company_number', models.CharField(max_length=255, unique=True)),
                ('company_category', models.CharField(blank=True, max_length=255)),
                ('company_status', models.CharField(blank=True, max_length=255)),
                ('sic_code_1', models.CharField(blank=True, max_length=255)),
                ('sic_code_2', models.CharField(blank=True, max_length=255)),
                ('sic_code_3', models.CharField(blank=True, max_length=255)),
                ('sic_code_4', models.CharField(blank=True, max_length=255)),
                ('uri', models.CharField(blank=True, max_length=255)),
                ('incorporation_date', models.DateField(null=True)),
                ('registered_address_country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='companieshousecompanies_with_country_registered_address', to='metadata.Country')),
            ],
            options={
                'verbose_name_plural': 'Companies House companies',
            },
        ),
        migrations.AddIndex(
            model_name='contact',
            index=models.Index(fields=['created_on', 'id'], name='company_con_created_dbaf20_idx'),
        ),
        migrations.AddIndex(
            model_name='company',
            index=models.Index(fields=['created_on', 'id'], name='company_com_created_a7054b_idx'),
        ),
        migrations.RunPython(
            code=load_one_list_tiers,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        # These are indexes that can't be created via the Django ORM.
        migrations.RunSQL(
            sql=["""CREATE INDEX "company_contact_upper_email_244368" ON 
"company_contact" (UPPER("email"));"""],
            reverse_sql=['DROP INDEX "company_contact_upper_email_244368";'],
        ),
        migrations.RunSQL(
            sql=["""CREATE INDEX "company_contact_upper_email_alternative_eb17a977" ON 
"company_contact" (UPPER("email_alternative"));"""],
            reverse_sql=['DROP INDEX "company_contact_upper_email_alternative_eb17a977";'],
        ),
        migrations.RunSQL(
            sql=["""CREATE INDEX "company_advisor_is_active_upper_name_e0ab1b4f" ON 
"company_advisor" ("is_active", (UPPER("first_name" || \' \' || "last_name" )));"""],
            reverse_sql=['DROP INDEX "company_advisor_is_active_upper_name_e0ab1b4f";'],
        ),
    ]
