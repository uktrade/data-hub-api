# Generated by Django 3.2.16 on 2023-01-25 13:35

from django.db import migrations
from django.db.models import Q
from datahub.core.constants import InvestmentProjectStage
from datahub.investment.project.models import IProjectAbstract
# from datahub.core.constants import InvestmentType

from datahub.reminder.test.factories import (
    NewExportInteractionSubscriptionFactory,
    NoRecentExportInteractionSubscriptionFactory,
    NoRecentInvestmentInteractionSubscriptionFactory,
    UpcomingEstimatedLandDateSubscriptionFactory,
)

from datahub.reminder.models import (
    NewExportInteractionSubscription,
    NoRecentExportInteractionSubscription,
    UpcomingEstimatedLandDateSubscription,
    NoRecentInvestmentInteractionSubscription
)

from datahub.feature_flag.models import(
    UserFeatureFlagGroup
)

from datahub.company.models import(
    Advisor
)

from datahub.metadata.models import (Team, TeamRole)

num_reminder_users_to_create = 21

def add_advisor(apps, index):
    advisor_email = f'reminder_test{index}@datahub.com'
    investment_name = f'investment_reminder_test{index}'

    Advisor = apps.get_model("company", "Advisor")
    UserFeatureFlagGroup = apps.get_model("feature_flag", "UserFeatureFlagGroup")
    InvestmentProject = apps.get_model("investment", "InvestmentProject")
    InvestmentType = apps.get_model("metadata", "InvestmentType")

    new_advisor = Advisor(
            email=advisor_email,
            # feature_groups=[1]
        )


    # Add an interaction with each of the 7 filterable options

    # Add export-notifications
    # Add investment-notifications
    new_advisor.save()
    investment = InvestmentProject(name=investment_name,
                                    investment_type=InvestmentType.objects.filter(name='Commitment to invest')[:1].get()
                                   )
    if(index % 10 == 0):
        investment .project_manager=new_advisor
        investment.save()

    new_advisor.feature_groups.add(UserFeatureFlagGroup.objects.filter(code='export-notifications')[:1].get())
    new_advisor.feature_groups.add(UserFeatureFlagGroup.objects.filter(code='investment-notifications')[:1].get())

def migrate_users_to_reminders(apps, schema_editor):
    # get the correct versions of models using the app registry
    for i in range(num_reminder_users_to_create):
        print(f'Creating advisor with email reminder_test{i}@datahub.com')
        add_advisor(apps, i)

    Advisor = apps.get_model("company", "Advisor")
    InvestmentProject = apps.get_model("investment", "InvestmentProject")
    UserFeatureFlagGroup = apps.get_model("feature_flag", "UserFeatureFlagGroup")

    export_feature_flag_group = UserFeatureFlagGroup.objects.filter(code='export-notifications')[:1].get()
    investment_feature_flag_group = UserFeatureFlagGroup.objects.filter(code='investment-notifications')[:1].get()

    for advisor in Advisor.objects.all():

        # If this advisor already has export-notifications and investment-notifications feature groups,
        # then we can just move on to next advisor
        has_export_feature_group = advisor.feature_groups.filter(code='export-notifications').exists()
        has_investment_feature_group = advisor.feature_groups.filter(code='investment-notifications').exists()

        if(has_export_feature_group and has_investment_feature_group):
            print(f"Advisor {advisor.email} has all feature flags already enabled, can skip this advisor")
            continue

        if has_export_feature_group:
            print(f"Advisor {advisor.email} has export-notifications.")

        if has_investment_feature_group:
            print(f"Advisor {advisor.email} has investment-notifications.")


        has_interaction = InvestmentProject.objects.filter(
            Q(project_manager=advisor)
            | Q(project_assurance_adviser=advisor)
            | Q(client_relationship_manager=advisor)
            | Q(referral_source_adviser=advisor),
            status__in=[
                IProjectAbstract.Status.ONGOING,
                IProjectAbstract.Status.DELAYED,
            ],
            stage_id=InvestmentProjectStage.active.value.id,
        ).exists()

        if has_interaction:
            print(f"Advisor {advisor.email} has interactions.")
            if(not has_investment_feature_group):
                print(f"Advisor {advisor.email} is missing the investment_feature_flag_group. Adding this to their list")
                advisor.feature_groups.add(investment_feature_flag_group)

    pass

## logic for migrating backwards
def reverse_func(apps, schema_editor):
    print('reversing migration, no need to do anything at the moment')

    Advisor = apps.get_model("company", "Advisor")
    print("Deleting all users")
    Advisor.objects.filter(email__icontains="reminder_test").delete()

    InvestmentProject = apps.get_model("investment", "InvestmentProject")
    print("Deleting all investments")
    InvestmentProject.objects.filter(name__icontains="investment_reminder_test").delete()

def ita_django_shell_script(apps, schema_editor):
    advisor_ids=['9f77f6d8-c2b7-48f1-b07d-3534c155f97b']
    advisers = Advisor.objects.filter(id__in=advisor_ids)

    feature_group = UserFeatureFlagGroup.objects.get(code='export-notifications')

    for adviser in advisers:
        adviser.feature_groups.add(feature_group)

        if not NewExportInteractionSubscription.objects.filter(adviser=adviser).exists():
            NewExportInteractionSubscriptionFactory(
                adviser=adviser,
            )
        if not NoRecentExportInteractionSubscription.objects.filter(adviser=adviser).exists():
            NoRecentExportInteractionSubscriptionFactory(
                adviser=adviser,
                reminder_days=[90],
                email_reminders_enabled=True,
            )

def post_django_add_investment_to_export_shell_script(apps, schema_editor):
    export_feature_group = UserFeatureFlagGroup.objects.get(code='export-notifications')
    investment_feature_group = UserFeatureFlagGroup.objects.get(code='investment-notifications')

    post_team_role = TeamRole.objects.filter(name="Post")[:1].get()
    post_teams = Team.objects.filter(role=post_team_role).values('id')
    for post_team in post_teams:
        print(post_team)

    advisors = Advisor.objects.filter(dit_team__id__in=post_teams).filter(feature_groups=investment_feature_group).exclude(feature_groups=export_feature_group)
    for adviser in advisors:
        print(f'{adviser.id}, {adviser.email}')
        #Add this user to the export-notifications feature group
        adviser.feature_groups.add(export_feature_group)


def post_django_shell_script(apps, schema_editor):
    advisor_ids = ['9f77f6d8-c2b7-48f1-b07d-3534c155f97b']
    advisers = Advisor.objects.filter(id__in=advisor_ids)

    export_feature_group = UserFeatureFlagGroup.objects.get(code='export-notifications')
    investment_feature_group = UserFeatureFlagGroup.objects.get(code='investment-notifications')

    for adviser in advisers:
        adviser.feature_groups.add(investment_feature_group)
        adviser.feature_groups.add(export_feature_group)


        #TODO - check what this scubscript defaults should be
        if not NewExportInteractionSubscription.objects.filter(adviser=adviser).exists():
            NewExportInteractionSubscriptionFactory(
                adviser=adviser,
            )
        if not NoRecentExportInteractionSubscription.objects.filter(adviser=adviser).exists():
            NoRecentExportInteractionSubscriptionFactory(
                adviser=adviser,
                reminder_days=[90],
                email_reminders_enabled=True,
            )

        if not NoRecentInvestmentInteractionSubscription.objects.filter(adviser=adviser).exists():
            NoRecentInvestmentInteractionSubscriptionFactory(
                adviser=adviser,
                reminder_days=[60],
                email_reminders_enabled=True,
            )
        if not UpcomingEstimatedLandDateSubscription.objects.filter(adviser=adviser).exists():
            UpcomingEstimatedLandDateSubscriptionFactory(
            adviser=adviser,
            reminder_days=[30,60],
            email_reminders_enabled=True,
            )


class Migration(migrations.Migration):

    dependencies = [
        ('reminder', '0008_create_reminder_for_new_export_interactions'),
    ]

    operations = [
        migrations.RunPython(post_django_add_investment_to_export_shell_script, reverse_func),
    ]


