import uuid

from django.conf import settings
from django.db import models

from datahub.core.models import BaseModel

from .constants import PaymentMethod, RefundStatus
from .managers import PaymentManager


MAX_LENGTH = settings.CHAR_FIELD_MAX_LENGTH


class Payment(BaseModel):
    """Details of a payment."""

    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name="%(class)ss",  # noqa: Q000
    )
    reference = models.CharField(
        max_length=100,
        help_text='Autogenerated by the system.'
    )
    transaction_reference = models.CharField(
        max_length=MAX_LENGTH, blank=True,
        help_text='As it appears on the transaction receipt.'
    )
    additional_reference = models.CharField(
        max_length=MAX_LENGTH, blank=True, editable=True,
        help_text='Legacy field.'
    )

    amount = models.PositiveIntegerField(help_text='Amount paid in pence.')
    method = models.CharField(
        max_length=100,
        choices=PaymentMethod,
        default=PaymentMethod.bacs
    )
    received_on = models.DateField()

    # card payments
    cardholder_name = models.CharField(max_length=MAX_LENGTH, blank=True)
    card_brand = models.CharField(max_length=100, blank=True)
    billing_email = models.EmailField(blank=True)
    billing_phone = models.CharField(max_length=100, blank=True)
    billing_fax = models.CharField(max_length=100, blank=True)
    billing_address_1 = models.CharField(max_length=MAX_LENGTH, blank=True)
    billing_address_2 = models.CharField(max_length=MAX_LENGTH, blank=True)
    billing_address_town = models.CharField(max_length=MAX_LENGTH, blank=True)
    billing_address_county = models.CharField(max_length=MAX_LENGTH, blank=True)
    billing_address_postcode = models.CharField(max_length=100, blank=True)
    billing_address_country = models.CharField(max_length=MAX_LENGTH, blank=True)

    # cheque
    cheque_number = models.CharField(max_length=MAX_LENGTH, blank=True)
    giro_slip_number = models.CharField(max_length=MAX_LENGTH, blank=True)
    sort_code = models.CharField(max_length=100, blank=True)
    cheque_banked_on = models.DateTimeField(blank=True, null=True)
    cheque_paid_in_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        null=True, blank=True,
        on_delete=models.SET_NULL,
        related_name='+'
    )

    objects = PaymentManager()

    class Meta:
        ordering = ('created_on', )

    def __str__(self):
        """Human-readable representation"""
        return self.reference


class Refund(BaseModel):
    """Details of a refund."""

    id = models.UUIDField(primary_key=True, default=uuid.uuid4)
    order = models.ForeignKey(
        'order.Order',
        on_delete=models.CASCADE,
        related_name="%(class)ss",  # noqa: Q000
    )
    reference = models.CharField(max_length=100)
    status = models.CharField(max_length=100, choices=RefundStatus)

    requested_on = models.DateTimeField()
    requested_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        null=True, blank=True,
        on_delete=models.PROTECT,
        related_name='+'
    )
    refund_reason = models.TextField(blank=True)
    requested_amount = models.PositiveIntegerField()

    level1_approved_on = models.DateTimeField(blank=True, null=True)
    level1_approved_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        null=True, blank=True,
        on_delete=models.PROTECT,
        related_name='+'
    )
    level1_approval_notes = models.TextField(blank=True)

    level2_approved_on = models.DateTimeField(blank=True, null=True)
    level2_approved_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        null=True, blank=True,
        on_delete=models.PROTECT,
        related_name='+'
    )
    level2_approval_notes = models.TextField(blank=True)

    method = models.CharField(
        max_length=100,
        null=True, blank=True,
        choices=PaymentMethod
    )
    net_amount = models.PositiveIntegerField(null=True, blank=True)
    vat_amount = models.PositiveIntegerField(null=True, blank=True)
    total_amount = models.PositiveIntegerField(null=True, blank=True)

    rejection_reason = models.TextField(blank=True)

    # legacy fields
    payment = models.ForeignKey(
        Payment,
        null=True, blank=True,
        on_delete=models.SET_NULL,
        related_name='+'
    )
    additional_reference = models.CharField(max_length=100, blank=True)

    class Meta:
        ordering = ('created_on', )

    def __str__(self):
        """Human-readable representation"""
        return self.reference
