# Generated by Django 3.2.22 on 2023-10-25 10:09

from django.db import migrations, models
from pathlib import PurePath
import uuid
from typing import Any
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
import django.db.models.deletion

from datahub.core.migration_utils import load_yaml_data_in_migration


class RenameIndexOperation(migrations.RunPython):
    """
    Django currently does not rename the index when corresponding field is renamed,
    so we need to do that manually, so there is no conflict. 
    """

    def __init__(self, model_name, old_field_name, new_field_name):
        self.model_name = model_name
        self.old_field_name = old_field_name
        self.new_field_name = new_field_name
    
    def rename_index(self, schema_editor: BaseDatabaseSchemaEditor, table_name, old_field_name, new_field_name):
        introspection = schema_editor.connection.introspection
        indexes = introspection.get_constraints(
            schema_editor.connection.cursor(),
            table_name,
        )
        for index_name, index_info in indexes.items():
            # the index will have old name, but will already point at new field name
            if index_info['columns'] == [new_field_name] and index_info['index'] and index_info['unique'] is False:
                new_index_name = index_name.replace(old_field_name, new_field_name)
                schema_editor.execute(f'ALTER INDEX {index_name} RENAME TO {new_index_name}')
                break
        
    def database_forwards(self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any) -> None:
        table_name = to_state.apps.get_model(app_label, self.model_name)._meta.db_table
        self.rename_index(schema_editor, table_name, self.old_field_name, self.new_field_name)

    def database_backwards(self, app_label: Any, schema_editor: Any, from_state: Any, to_state: Any) -> None:
        pass


def load_winukregions(apps, _):
    load_yaml_data_in_migration(
        apps,
        PurePath(__file__).parent / '0033_win_uk_regions.yaml'
    )


class Migration(migrations.Migration):

    dependencies = [
        ('export_win', '0032_hvc_legacy_id'),
    ]

    operations = [
        migrations.CreateModel(
            name='WinUKRegion',
            fields=[
                ('disabled_on', models.DateTimeField(blank=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.TextField(blank=True)),
                ('order', models.FloatField(default=0.0)),
                ('export_win_id', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ('order',),
                'abstract': False,
            },
        ),
        migrations.RenameField(
            model_name='win',
            old_name='customer_location',
            new_name='customer_location_data_hub',
        ),
        RenameIndexOperation(
            model_name='win',
            old_field_name='customer_location_id',
            new_field_name='customer_location_data_hub_id',
        ),
        migrations.AlterField(
            model_name='win',
            name='customer_location_data_hub',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='wins', to='metadata.ukregion', verbose_name='HQ location'),
        ),
        migrations.AddField(
            model_name='win',
            name='customer_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='wins', to='export_win.winukregion', verbose_name='HQ location'),
        ),
        migrations.RunPython(load_winukregions, migrations.RunPython.noop),
    ]
