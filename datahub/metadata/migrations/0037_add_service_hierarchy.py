# Generated by Django 2.0.2 on 2018-03-05 14:17

from pathlib import PurePath

import django.db.models.deletion
import mptt
import mptt.fields
import mptt.managers
import datahub.core.fields
from django.db import migrations, models
from datahub.core.migration_utils import load_yaml_data_in_migration


def load_services(apps, schema_editor):
    load_yaml_data_in_migration(
        apps,
        PurePath(__file__).parent / '0037_add_service_hierarchy.yaml'
    )


def rebuild_tree(apps, schema_editor):
    Service = apps.get_model('metadata', 'Service')
    manager = mptt.managers.TreeManager()
    manager.model = Service
    mptt.register(Service, order_insertion_by=['segment'])
    manager.contribute_to_class(Service, 'objects')
    manager.rebuild()


class Migration(migrations.Migration):

    dependencies = [
        ('metadata', '0036_remove_requires_service_answers_flow_feature_flag_from_db'),
    ]

    # We're temporarily leaving the name column in the database to avoid downtime and allow the
    # migration to be reversed.
    #
    # Once these changes have been released, the column can be removed from the database using
    # another migration.
    state_operations = [
        migrations.RemoveField(
            model_name='service',
            name='name',
        ),
    ]

    database_operations = [
        migrations.AlterField(
            model_name='service',
            name='name',
            field=models.TextField(blank=True, null=True),
        ),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='service',
            options={
                'ordering': ('lft',)
            },
        ),
        migrations.AddField(
            model_name='service',
            name='segment',
            field=models.CharField(max_length=255, default='(name not set)'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='service',
            name='level',
            field=models.PositiveIntegerField(default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='service',
            name='lft',
            field=models.PositiveIntegerField(default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='service',
            name='parent',
            field=mptt.fields.TreeForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name='children',
                to='metadata.Service',
            ),
        ),
        migrations.AddField(
            model_name='service',
            name='rght',
            field=models.PositiveIntegerField(default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='service',
            name='tree_id',
            field=models.PositiveIntegerField(db_index=True, default=0, editable=False),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='service',
            name='contexts',
            field=datahub.core.fields.MultipleChoiceField(
                blank=True,
                choices=(
                    ('event', 'Event'),
                    ('export_interaction', 'Export interaction'),
                    ('export_service_delivery', 'Export service delivery'),
                    ('investment_interaction', 'Investment interaction'),
                    ('investment_project_interaction', 'Investment project interaction'),
                    ('other_interaction', 'Other interaction'),
                    ('other_service_delivery', 'Other service delivery'),
                    ('interaction', 'Interaction (deprecated)'),
                    ('service_delivery', 'Service delivery (deprecated)'),
                ),
                help_text='Contexts are only valid on leaf nodes.',
                max_length=255
            ),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=state_operations, database_operations=database_operations,
        ),
        migrations.RunPython(load_services, migrations.RunPython.noop),
        migrations.RunPython(rebuild_tree, migrations.RunPython.noop),
    ]
