# Generated by Django 2.1.7 on 2019-03-28 13:54
from logging import getLogger

from django.db import migrations


logger = getLogger(__name__)


def copy_service_contexts(apps, from_context, to_context):
    service_model = apps.get_model('metadata', 'Service')

    if service_model.objects.filter(contexts__contains=[to_context]).exists():
        logger.info(
            f'There are already services with the {to_context} context, skipping copying of '
            f'the {from_context} context to the {to_context} context',
        )
        return

    num_updated = 0
    queryset = service_model.objects.filter(
        contexts__contains=[from_context],
        disabled_on__isnull=True,
    )
    for service in queryset:
        service.contexts.append(to_context)
        service.save()
        num_updated += 1

    logger.info(
        f'Set the {to_context} context on {num_updated} services that had the {from_context} '
        f'context',
    )


def populate_other_interaction_context(apps, schema_editor):
    """
    If there are no existing services with the 'other_interaction' context, set the
    'other_interaction' context on all services that have the 'interaction' context.
    """
    return copy_service_contexts(apps, 'interaction', 'other_interaction')


def populate_other_service_delivery_context(apps, schema_editor):
    """
    If there are no existing services with the 'other_service_delivery' context, set
    the 'other_service_delivery' context on all services that have the 'service_delivery'
    context.
    """
    return copy_service_contexts(apps, 'service_delivery', 'other_service_delivery')


class Migration(migrations.Migration):

    dependencies = [
        ('metadata', '0023_add_chinese_regions'),
    ]

    operations = [
        migrations.RunPython(
            populate_other_interaction_context,
            migrations.RunPython.noop,
            elidable=True,
        ),
        migrations.RunPython(
            populate_other_service_delivery_context,
            migrations.RunPython.noop,
            elidable=True,
        ),
    ]
