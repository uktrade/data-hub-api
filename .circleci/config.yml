version: 2.1

job_defaults: &job_defaults
  parameters:
    python_image:
      type: string

    es_image:
      type: string

    es_apm_image:
      type: string

    postgres_image:
      type: string

    mi_postgres_image:
      type: string

    publish_coverage:
      type: boolean
      default: false

  environment:
    ADMIN_OAUTH2_ENABLED: 'True'
    ADMIN_OAUTH2_BASE_URL: ''
    ADMIN_OAUTH2_TOKEN_FETCH_PATH: '/o/token/'
    ADMIN_OAUTH2_USER_PROFILE_PATH: '/o/v1/user/me/'
    ADMIN_OAUTH2_AUTH_PATH: '/o/authorize/'
    ADMIN_OAUTH2_CLIENT_ID: 'client-id'
    ADMIN_OAUTH2_CLIENT_SECRET: 'client-secret'
    ADMIN_OAUTH2_LOGOUT_PATH: '/o/logout'
    ACTIVITY_STREAM_ACCESS_KEY_ID: some-id
    ACTIVITY_STREAM_SECRET_ACCESS_KEY: some-secret
    DATABASE_URL: postgresql://postgres:datahub@postgres/datahub
    MI_DATABASE_URL: postgresql://postgres:datahub@mi-postgres/mi
    DEBUG: 'True'
    DJANGO_SECRET_KEY: changeme
    DJANGO_SETTINGS_MODULE: config.settings.local
    ES_INDEX_PREFIX: test_index
    ES5_URL: http://localhost:9200
    # This has been readded to allow tests utilizing elasticsearch to be unskipped
    ELASTICSEARCH_URL: http://localhost:9200
    PAAS_IP_WHITELIST: 1.2.3.4
    AWS_DEFAULT_REGION: eu-west-2
    AWS_ACCESS_KEY_ID: foo
    AWS_SECRET_ACCESS_KEY: bar
    DEFAULT_BUCKET: baz
    SSO_ENABLED: 'True'
    STAFF_SSO_BASE_URL: http://sso.invalid/
    STAFF_SSO_AUTH_TOKEN: sso-token
    DIT_EMAIL_DOMAINS: trade.gov.uk,digital.trade.gov.uk
    DATA_HUB_FRONTEND_ACCESS_KEY_ID: frontend-key-id
    DATA_HUB_FRONTEND_SECRET_ACCESS_KEY: frontend-key
    ES_APM_ENABLED: 'True'
    ES_APM_SERVICE_NAME: datahub
    ES_APM_SECRET_TOKEN:
    ES_APM_SERVER_URL: http://localhost:8200
    ES_APM_ENVIRONMENT: 'circleci'

  working_directory: ~/app

  docker:
    - image: <<parameters.python_image>>

    - image: <<parameters.es_image>>
      environment:
        discovery.type: single-node
        http.port: 9200

    - image: <<parameters.es_apm_image>>
      command: ["apm-server", "-e", "-E", "output.elasticsearch.hosts=[\"localhost:9200\"]"]

    - image: <<parameters.postgres_image>>
      name: postgres
      environment:
        POSTGRES_DB: datahub
        POSTGRES_PASSWORD: datahub

    - image: <<parameters.mi_postgres_image>>
      name: mi-postgres
      environment:
        POSTGRES_DB: mi
        POSTGRES_PASSWORD: datahub

  steps:
    - checkout

    - restore_cache:
        name: Restore pip cache
        keys:
          - v2-<< parameters.python_image >>-{{ checksum "requirements.txt" }}
        paths:
          - ~/cache/pip

    - run:
        name: Install dependencies
        command: python -m pip install --cache-dir ~/cache/pip --progress-bar off -r requirements.txt

    - save_cache:
        name: Save pip cache
        key: v2-<< parameters.python_image >>-{{ checksum "requirements.txt" }}
        paths:
          - ~/cache/pip
    - run:
        name: Run Flake8
        command: python -m flake8

    - run:
        name: Run tests
        command: python -m pytest -n 4 --cov --junitxml=test-reports/junit.xml --durations 25

    - store_test_results:
        path: test-reports

    - when:
        condition: <<parameters.publish_coverage>>
        steps:
        - run:
            name: Publish coverage
            command: |
              wget -O codecov.sh https://codecov.io/bash
              bash ./codecov.sh -t ${COV_TOKEN}

jobs:
  build:
    <<: *job_defaults

workflows:
  version: 2

  Default build:
    jobs:
      - build:
          publish_coverage: true
          python_image: python:3.8
          postgres_image: postgres:10
          mi_postgres_image: postgres:9.6
          es_image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
          es_apm_image: docker.elastic.co/apm/apm-server:7.7.1
